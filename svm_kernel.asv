function kernel_value = svm_kernel(kernel_type, U, V)

%  Input: kernel_type - kernel type
%         u,v - kernel arguments
%
%  Values for ker: 'linear'  -
%                  'poly'    - p1 is degree of polynomial
%                  'rbf'     - p1 is width of rbfs (sigma)
%                  'sigmoid' - p1 is scale, p2 is offset
%                  'spline'  -
%                  'bspline' - p1 is degree of bspline
%                  'fourier' - p1 is degree
%                  'erfb'    - p1 is width of rbfs (sigma)
%                  'anova'   - p1 is max order of terms
%              
%  Author: Steve Gunn (srg@ecs.soton.ac.uk)

  if (nargin < 1) % check correct number of arguments
     help svm_kernel
  else
     
    global p1 p2;

    % could check for correct number of args in here
    % but will slow things down further
    switch lower(kernel_type)
      case 'linear'
        kernel_value = U*V';
      case 'poly'
        kernel_value = (U*V' + 1)^p1;
      case 'rbf'
        kernel_value = exp(-(U-V)*(U-V)'/(2*p1^2));
      case 'erbf'
        kernel_value = exp(-sqrt((U-V)*(U-V)')/(2*p1^2));
      case 'sigmoid'
        kernel_value = tanh(p1*U*V'/length(U) + p2);
      case 'fourier'
        z = sin(p1 + 1/2)*2*ones(length(U),1);
        i = find(U-V);
        z(i) = sin(p1 + 1/2)*(U(i)-V(i))./sin((U(i)-V(i))/2);
        kernel_value = prod(z);
      case 'spline'
        z = 1 + U.*V + (1/2)*U.*V.*min(U,V) - (1/6)*(min(U,V)).^3;
        kernel_value = prod(z);
      case 'bspline'
        z = 0;
        for r = 0: 2*(p1+1)
          z = z + (-1)^r*binomial(2*(p1+1),r)*(max(0,U-V + p1+1 - r)).^(2*p1 + 1);
        end
        kernel_value = prod(z);
      case 'anovaspline1'
        z = 1 + U.*V + U.*V.*min(U,V) - ((U+V)/2).*(min(U,V)).^2 + (1/3)*(min(U,V)).^3;
        kernel_value = prod(z); 
      case 'anovaspline2'
        z = 1 + U.*V + (U.*V).^2 + (U.*V).^2.*min(U,V) - U.*V.*(U+V).*(min(U,V)).^2 + (1/3)*(U.^2 + 4*U.*V + V.^2).*(min(U,V)).^3 - (1/2)*(U+V).*(min(U,V)).^4 + (1/5)*(min(U,V)).^5;
        kernel_value = prod(z);
      case 'anovaspline3'
        z = 1 + U.*V + (U.*V).^2 + (U.*V).^3 + (U.*V).^3.*min(U,V) - (3/2)*(U.*V).^2.*(U+V).*(min(U,V)).^2 + U.*V.*(U.^2 + 3*U.*V + V.^2).*(min(U,V)).^3 - (1/4)*(U.^3 + 9*U.^2.*V + 9*U.*V.^2 + V.^3).*(min(U,V)).^4 + (3/5)*(U.^2 + 3*U.*V + V.^2).*(min(U,V)).^5 - (1/2)*(U+V).*(min(U,V)).^6 + (1/7)*(min(U,V)).^7;
        kernel_value = prod(z);
      case 'anovabspline'
        z = 0;
        for r = 0: 2*(p1+1)
          z = z + (-1)^r*binomial(2*(p1+1),r)*(max(0,U-V + p1+1 - r)).^(2*p1 + 1);
        end
        kernel_value = prod(1 + z);
      otherwise
        kernel_value = U*V';
    end

  end
