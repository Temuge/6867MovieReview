% Input: 
%   X:  a Nxd matrix where N is the number of the training data and d is 
%       the dimension of the feature vector
%   y:  a vector of size Nx1 of 1 (if it is a positive example) or -1
%       if it is a negative example

%   kernel_function:  Kernel function svmtrain uses to map the training data 
%                   into kernel space. The default kernel function is the 
%                   dot product. 
%   See http://www.mathworks.com/help/stats/svmtrain.html for more optional
%   parameters.
% 
% Return:
%   svm_struct: the svm_struct predictor


function [svm_struct] = svm_train(y, X, varargin)
    p = inputParser;
    
    checkY = @(y) (isnumeric(y) || ischar(y));
    checkX = @(X) (isnumeric(X) || ischar(X));
    
    defaultShowPlot = true;
    checkShowPlot = @(x) true;

    defaultKernelFunction = 'kernel_function';
    checkKernelFunction = @(x) true;
    
    
    
    defaultPolyOrder = 'polyorder';
    defaultRbfSigma = 'rbf_sigma';
    
    defaultBoxConstraint = 'boxconstraint';
    
    defaultAutoScale = 'autoscale';
    checkAutoScale = @(x) true;
    

    addRequired(p, 'y', checkY);
    addRequired(p, 'X', checkX);
    
    addParameter(p, 'showplot', defaultShowPlot, checkShowPlot);
    addParameter(p, 'kernel_function', defaultKernelFunction, checkKernelFunction);
    addParameter(p, 'polyorder', defaultPolyOrder, @isnumeric);
    addParameter(p, 'rbf_sigma', defaultRbfSigma, @isnumeric);
    addParameter(p, 'boxconstraint', defaultBoxConstraint, @isnumeric);
    addParameter(p, 'autoscale', defaultAutoScale, checkAutoScale);
    
    parse(p,y,X,varargin{:});
    
    svm_struct = svmtrain(X, y, 'showplot', showplot, 'kernel_function', kernel_function, ...
        'polyorder', polyorder, 'rbf_sigma', rbf_sigma, 'boxconstraint', boxconstraint, ...
        'autoscale', autoscale);
end